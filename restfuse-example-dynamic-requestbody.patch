### Eclipse Workspace Patch 1.0
#P com.eclipsesource.restfuse.example
diff --git src/com/eclipsesource/restfuse/example/DynamicBodyTest.java src/com/eclipsesource/restfuse/example/DynamicBodyTest.java
new file mode 100644
index 0000000..efb676d
--- /dev/null
+++ src/com/eclipsesource/restfuse/example/DynamicBodyTest.java
@@ -0,0 +1,71 @@
+/*******************************************************************************
+ * Copyright (c) 2013 Andreas Mihm.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andreas Mihm - initial API and implementation
+ ******************************************************************************/
+package com.eclipsesource.restfuse.example;
+
+import static com.eclipsesource.restfuse.Assert.assertOk;
+
+import org.junit.Rule;
+import org.junit.runner.RunWith;
+
+import com.eclipsesource.restfuse.Destination;
+import com.eclipsesource.restfuse.Method;
+import com.eclipsesource.restfuse.RequestContext;
+import com.eclipsesource.restfuse.Response;
+import com.eclipsesource.restfuse.annotation.Context;
+import com.eclipsesource.restfuse.annotation.HttpTest;
+import com.eclipsesource.restfuse.example.junit.OrderedHttpJUnitRunner;
+
+/**
+ * CAUTION: The way how this class uses restfuse to be able to send dynamic
+ * request bodies is a workaround which conflicts a bit with some principles of
+ * junit usage. So its an example how to approach this problem, but the final
+ * solution in restfuse should be to provide a annotaion free way to use
+ * restfuse.
+ * 
+ * @author mihm
+ * 
+ */
+@RunWith(OrderedHttpJUnitRunner.class)
+public class DynamicBodyTest {
+
+	@Rule
+	public Destination restfuse = getDestination();
+
+	@Context
+	private Response response;
+
+	// static variale to store the requestBody to be sent
+	private static String requestBody;
+
+	@HttpTest(method = Method.GET, path = "/v1/items")
+	public void a_getItems() {
+		// assertOk( response );
+		String jsonResponse = response.getBody();
+
+		// prepare next test method
+		requestBody = "{\"name\":\"testitem\", \"description\":\"a new item\"}";
+	}
+
+	@HttpTest(method = Method.POST, path = "/v1/items")
+	public void b_addItem() {
+		// assertOk( response );
+		String jsonResponse = response.getBody();
+	}
+
+	private Destination getDestination() {
+		Destination destination = new Destination(this, "http://localhost");
+		RequestContext context = destination.getRequestContext();
+		if (requestBody != null) {
+			context.setDynamicBody(requestBody);
+		}
+		return destination;
+	}
+}
diff --git src/com/eclipsesource/restfuse/example/junit/OrderedHttpJUnitRunner.java src/com/eclipsesource/restfuse/example/junit/OrderedHttpJUnitRunner.java
new file mode 100644
index 0000000..59490f5
--- /dev/null
+++ src/com/eclipsesource/restfuse/example/junit/OrderedHttpJUnitRunner.java
@@ -0,0 +1,46 @@
+/*******************************************************************************
+ * Copyright (c) 2013 Andreas Mihm.
+ * All rights reserved. This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *    Andreas Mihm - initial API and implementation
+ ******************************************************************************/
+package com.eclipsesource.restfuse.example.junit;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+import org.junit.runners.model.FrameworkMethod;
+import org.junit.runners.model.InitializationError;
+
+import com.eclipsesource.restfuse.HttpJUnitRunner;
+
+/**
+ * this class makes sure, that all methods of a test class are run in alphabetical order
+ * @author mihm
+ *
+ */
+public class OrderedHttpJUnitRunner extends HttpJUnitRunner {
+
+	public OrderedHttpJUnitRunner(Class<?> klass) throws InitializationError {
+		super(klass);
+		// TODO Auto-generated constructor stub
+	}
+
+	@Override
+	protected List<FrameworkMethod> computeTestMethods() {
+		List<FrameworkMethod> list = super.computeTestMethods();
+		List<FrameworkMethod> copy = new ArrayList<FrameworkMethod>(list);
+		Collections.sort(copy, new Comparator<FrameworkMethod>() {
+			public int compare(FrameworkMethod o1, FrameworkMethod o2) {
+				return ((FrameworkMethod) o1).getName().compareTo(((FrameworkMethod) o2).getName());
+			}
+		});
+		return copy;
+	}
+}